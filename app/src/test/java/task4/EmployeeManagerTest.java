/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package task4;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

// import java.util.List;

import org.junit.jupiter.api.BeforeEach;

// public class EmployeeManagerTest {

//     private EmployeeManager employeeManager;

//     @BeforeEach
//     void setUp() {
//         employeeManager = new EmployeeManager();
//     }

//     @Test
//     void testAddEmployee() {
//         Employee employee = new Employee("John", "Doe", "IT", 50000);
//         employeeManager.addEmployee(employee);
//         List<Employee> employeeList = employeeManager.getAllEmployees();
//         assertEquals(1, employeeList.size());
//         assertEquals(employee, employeeList.get(0));
//     }

//     @Test
//     void testRemoveEmployee() {
//         Employee employee1 = new Employee("John", "Doe", "IT", 50000);
//         Employee employee2 = new Employee("Jane", "Doe", "HR", 60000);
//         employeeManager.addEmployee(employee1);
//         employeeManager.addEmployee(employee2);
//         assertTrue(employeeManager.removeEmployee(employee1));
//         List<Employee> employeeList = employeeManager.getAllEmployees();
//         assertEquals(1, employeeList.size());
//         assertEquals(employee2, employeeList.get(0));
//     }

//     @Test
//     void testGetAllEmployees() {
//         Employee employee1 = new Employee("John", "Doe", "IT", 50000);
//         Employee employee2 = new Employee("Jane", "Doe", "HR", 60000);
//         employeeManager.addEmployee(employee1);
//         employeeManager.addEmployee(employee2);
//         List<Employee> employeeList = employeeManager.getAllEmployees();
//         assertEquals(2, employeeList.size());
//         assertEquals(employee1, employeeList.get(0));
//         assertEquals(employee2, employeeList.get(1));
//     }

//     @Test
//     void testGetEmployeesByDepartment() {
//         Employee employee1 = new Employee("John", "Doe", "IT", 50000);
//         Employee employee2 = new Employee("Jane", "Doe", "HR", 60000);
//         Employee employee3 = new Employee("Bob", "Smith", "IT", 55000);
//         employeeManager.addEmployee(employee1);
//         employeeManager.addEmployee(employee2);
//         employeeManager.addEmployee(employee3);
//         List<Employee> employeesInITDepartment = employeeManager.getEmployeesByDepartment("IT");
//         assertEquals(2, employeesInITDepartment.size());
//         assertEquals(employee1, employeesInITDepartment.get(0));
//         assertEquals(employee3, employeesInITDepartment.get(1));
//     }

//     @Test
//     void testGetAverageSalary() {
//         Employee employee1 = new Employee("John", "Doe", "IT", 50000);
//         Employee employee2 = new Employee("Jane", "Doe", "HR", 60000);
//         Employee employee3 = new Employee("Bob", "Smith", "IT", 55000);
//         employeeManager.addEmployee(employee1);
//         employeeManager.addEmployee(employee2);
//         employeeManager.addEmployee(employee3);
//         double averageSalary = employeeManager.getAverageSalary();
//         assertEquals(55000, averageSalary);
//     }
// }

public class EmployeeManagerTest {

    private EmployeeManager employeeManager;

    @BeforeEach
    public void setUp() {
        employeeManager = new EmployeeManager();
        employeeManager.addEmployee(new Employee("John", "Doe", "Sales", 50000));
        employeeManager.addEmployee(new Employee("Jane", "Smith", "Marketing", 60000));
        employeeManager.addEmployee(new Employee("Bob", "Johnson", "Sales", 55000));
    }

    @Test
    public void testRemoveEmployee() {
        Employee johnDoe = new Employee("John", "Doe", "Sales", 50000);
        assertTrue(employeeManager.removeEmployee(johnDoe));
        assertFalse(employeeManager.getAllEmployees().contains(johnDoe));
    }

    @Test
    public void testGetEmployeesByDepartment() {
        String department = "Sales";
        assertAll("employeesInDepartment",
                () -> assertTrue(employeeManager.getEmployeesByDepartment(department)
                        .contains(new Employee("John", "Doe", department, 50000))),
                () -> assertTrue(employeeManager.getEmployeesByDepartment(department)
                        .contains(new Employee("Bob", "Johnson", department, 55000))),
                () -> assertFalse(employeeManager.getEmployeesByDepartment(department)
                        .contains(new Employee("Jane", "Smith", department, 60000))));
    }

    @Test
    public void testGetAverageSalary() {
        double expectedAverage = (50000 + 60000 + 55000) / 3.0;
        double actualAverage = employeeManager.getAverageSalary();
        assertEquals(expectedAverage, actualAverage, 0.01);
    }

    @Test
    public void testGetAllEmployees() {
        assertEquals(3, employeeManager.getAllEmployees().size());
    }

    @Test
    public void testGetEmployeesByNonexistentDepartment() {
        assertTrue(employeeManager.getEmployeesByDepartment("NonexistentDepartment").isEmpty());
    }

    // @Test
    // public void testGetAverageSalaryWithNoEmployees() {
    //     EmployeeManager emptyEmployeeManager = new EmployeeManager();
    //     assertEquals(0, emptyEmployeeManager.getAverageSalary(), 0.01);
    // }

    @Test
    public void testAddMultipleEmployees() {
        Employee[] newEmployees = {
                new Employee("Mary", "Jones", "Marketing", 70000),
                new Employee("Tom", "Brown", "Sales", 60000),
                new Employee("Lisa", "Davis", "Marketing", 65000)
        };
        for (Employee employee : newEmployees) {
            employeeManager.addEmployee(employee);
        }
        assertEquals(6, employeeManager.getAllEmployees().size());
    }

}